from random import randint, choice
import os, sys


class Apocalypse:
    
    def __init__(self):
        apocalypse_type = ("Ядерный", "Зомби", "Биологический", "Инопланетный", "Ледниковый период", "Природный катаклизм")
        self.__type = choice(apocalypse_type)
        
        if self.__type in ("Ядерный", "Ледниковый период"):
            self.__temperature = randint(-50, 0)
            
        elif self.__type == "Природный катаклизм":
            self.__temperature = randint(0, 70)
            
        else:
            self.__temperature = randint(-20, 40)
            
        if self.__type in ( "Биологический", "Инопланетный"):
            self.__dangers = "Неопознанные существа"
            
        elif self.__type == "Ядерный":
            self.__dangers = "Радиация и мутанты"
            
        elif self.__type == "Зомби":
            self.__dangers = "Зомби"
        
        else:
            self.__dangers = "Опасные климатические условия"
            
    def get_info(self):
         print(f"Апокалипсис\nТип: {self.__type}\nТемпература: {self.__temperature}°С\nУгрозы: {self.__dangers}")
    
    
class Bunker:
    
    def __init__(self, num_of_players):
        
        self.__places = int(round(num_of_players / 2))

        self.__area = self.__places * 25
        
        self.__num_of_rooms = randint(2, 4)
        
        rooms = set(("Мастерская", "Лаборатория", "Библиотека", "Оружейная", "Медпункт", "Серверная", "Тир", "Склад с химической защитой"))
        used_rooms = set()
        
        stats = ("Открыто", "Электронный замок", "Заперто на ключ", "Дверь заклинило", "Заварено", "Проход завален камнями")
        
        self.__rooms = dict()
        self.__rooms["Жилое помещение"] = "Открыто"
        
        for _ in range(self.__num_of_rooms - 1):
            new_room = choice(tuple(rooms - used_rooms))
            used_rooms.add(new_room)
            status = choice(stats)
            self.__rooms[new_room] = status
            
        res1 = ("Замороженные пиццы", "Банки с едой", "Соленья", "Коробки с конфетами", "Чипсы", "Пшено", "Мед", "Чай", "Овсяные хлопья",
                "Кленовый сироп", "Сухое молоко", "Коржи для торта", "Протеиновые батончики", "Взбитые сливки", "Сыр с плесенью",
                "Свадебный торт", "Консервированные ананасы", "Пиво", "Банки с колой", "Финики", "Водка", "Пресная вода", "Банки с кофе")
        res2 = ("Телевизор", "Радио", "Книги по философии", "Компост", "Игровая приставка с играми", "Генератор", "Канистра с бензином",
                "Двигатель от самолета", "Книга по хирургии", "Футбольный мяч", "Сосновые шишки", "Игральные карты", "Шахматы из слоновой кости", "Листы железа",
                "Золотые слитки", "Учебник по химии", "Дакимакуры", "Мангал и шампуры", "Шланг", "Ящик с порохом", "Карта мира")
        self.__resources = (choice(res1), choice(res2))
        
    def get_info(self):
        print("Информация о бункере")
        print(f"Количество мест: {self.__places} человек")
        print(f"Площадь {self.__area}м2")
        print(f"Количество комнат – {self.__num_of_rooms}\nКомнаты:")
        for room in self.__rooms:
            print(f"{room} – {self.__rooms[room]}")
        print(f"Дополнительные ресурсы: {self.__resources[0]}, {self.__resources[1]}")
        
            
class Player:
    
    def __init__(self, name):
        self.__name = name
        
        self.__age = randint(14, 60)
        
        self.__sex = choice(("Мужчина", "Женщина"))
        
        if self.__sex == "Женщина" and randint(1, 20) == 1:
            self.__health = "Беременность"
        else:
            self.__health = None
        
        num = randint(1, 10)
        if num <= 7:
            self.__gender = "Гетеросексуал"
        elif num > 9:
            self.__gender = "Бисексуал"
        else:
           self.__gender = "Гомосексуал" 
        
        professions = ("Врач", "Полицейский", "Пожарный", "Вор", "Грабитель", "Военный", "Фермер", "IT-специалист",
                       "Дипломат", "Политик", "Механик", "Инженер", "Наркодиллер", "Пилот", "Капитан судна",
                       "Судья", "Охотник", "Грузчик", "Кладмен", "Слесарь", "Токарь", "Сантехник", "Электрик",
                       "Прокурор", "Экскурсовод", "Водитель", "Таксист", "Дальнобойщик", "Актер", "Музыкант",
                       "Эстрадный исполнитель", "Дегустатор", "Сомелье", "Художник", "Безработный", "Предприниматель",
                       "Футболист", "Гончар", "Археолог", "Антрополог", "Кассир", "Кондитер", "Философ", "Секретарь",
                       "Ювелир", "Шеф-повар", "Повар")
        self.__profession = choice(professions)
        
        illnesses = ("Рак", "Чума", "Нет одной руки", "Нет одной ноги", "Нет одного глаза", "Слепота", "Глухота", "Немота",
                     "Нет зубов", "Бешенство", "Парализована нижняя часть тела", "Катаракта", "Протез руки", "Протез ноги",
                     "Малярия", "Бесплодие", "Дальтонизм", "Нарушение речи", "Глисты", "Плоскостопие",
                     "Искривление позвоночника", "Недержание", "Высокое давление", "ВИЧ", "Хламидиоз", "Гастрит", "Алкоголизм")
        if self.__health is None:
            num = randint(0, 2)
            if num == 0:
                self.__health = "Нормальное состояние"
            else:
                self.__health = choice(illnesses)
                
        hobbies =("Макраме", "Вязание", "Программирование", "Азартные игры", "Стрельба в тире", "Спорт", "Рукоделие", "Кулинария",
                  "Компьютерные игры", "Выращивание растений", "Радиотехника", "Стрельба из лука", "Путешествия", "Выживание",
                  "Рисование", "Создание кукол", "Съемка видео", "Фотография", "Игра на гитаре", "Сборка кубика-рубика")
        self.__hobby = choice(hobbies)
        
        characters = ("Добрый", "Злой", "Агрессивный", "Депрессивный", "Пугливый", "Решительный", "Смелый", "Заботливый", "Педантичный", "Безумный")
        self.__character = choice(characters)
        
        phobias = ("Арахнофобия", "Клаустрофобия", "Агорофобия", "Демофобия", "Антропофобия", "Коулрофобия", "Трипофобия", "Акрофобия", "Аэрофобия",
                   "Аквафобия", "Офидиофобия", "Гематофобия", "Танатофобия", "Аутофобия", "Глоссофобия", "Мизофобия", "Трипанофобия", "Астрафобия",
                   "Кинофобия", "Канцерофобия", "Ахлуофобия", "Аграфобия", "Айлурофобия", "Айхмофобия", "Акустикофобия", "Алгофобия", "Андрофобия",
                   "Генофобия", "Гетерофобия", "Гомофобия", "Гинекофобия", "Гравидофобия")
        self.__phobia = choice(phobias)
        
        information = ("Ненавидит современную музыку", "Ограбил(а) банк", "Владеет хорошей спортивной подготовкой", "По первому образованию - терапевт",
                       "Увлекается охотой", "Ненавидит кофе", "Может оказать первую помощь", "Выиграл(а) в лотерее целое состояние",
                       "Побывал(а) на вершине Эвереста", "Был(а) вожатым в лагере", "Хорошо играет в карты", "Обладает феноменальной памятью",
                       "Верит в сверхъестественных существ", "Проектировал(а) этот бункер", "Хорошо знает высшую математику",
                       "Имеет два высших образования", "Знает наизусть все стихи Пушкина", "Является мастером спорта по боксу",
                       "Имеет экстрасенсорные способности", "Знает четыре языка", "Любит мягкие игрушки", "Верит в пришельцев", 
                       "Сидел(а) в тюрьме", "Умеет вскрывать замки", "Умеет жонглировать", "Проходил(а) курс по самообороне",
                       "Проходил(а) курсы массажа", "Пережил(а) три покушения", "Не переносит алкоголь")
        self.__dop_info = choice(information)
        
        knowlege = ("Координаты продовольственного склада", "Координаты заправки", "Координаты полицейского участка", "Координаты военной базы", "Нет",
                    "Координаты бункера с саженцами", "Координаты бункера с добрыми выжившими", "Координаты бункера со злыми выжившими",
                    "Координаты оружейного магазина", "Координаты бункера с едой", "Координаты правительственного бункера",
                    "Координаты казино", "Координаты больницы", "Координаты стадиона", "Координаты бассейна", "Координаты магазина", "Координаты университета")
        self.__knowlege = choice(knowlege)
        
        luggage = ("Ноутбук", "Ружье", "Аптечка", "Банка компота", "Чемодан денег", "Бутылка водки", "Книги по химии", "Рюкзак с провизией",
                   "Карта местности", "Рация", "Пистолет", "Нож", "Книги по философии", "Набор отмычек", "Инструменты", "Ничего", "Автомобильный аккумулятор",
                   "Овсяные хлопья", "Зонтик", "Бейсбольная бита", "Книги по медицине", "Грим для клоуна", "Костюм клоуна", "Искуственные цветы",
                   "Шар для боулинга", "Лом", "Бензопила", "Палатка", "Топовая видеокарта", "Керамическая ваза", "Шампуры", "Наручники",
                   "Удостоверение полицейского", "Чайный гриб", "Красный диплом", "Ключ от машины неподалеку", "Гербарий", "Химзащита", "Семмена растений",
                   "Три лимона", "Золотое кольцо с бриллиантом", "Замороженные креветки", "Костюм Снегурочки", "Синие шариковые ручки")
        self.__luggage = choice(luggage)
        
        option = set(("Позволяет скопировать хобби другого игрока", "Позволяет поменяться профессией с другим игроком",
                     "Позволяет вылечить от любого недуга любого игрока кроме вас", "Убирает одно место в бункере",
                     "Позволяет раскрыть хобби любого игрока", "Позволяет раскрыть профессию любого игрока",
                     "Позволяет раскрыть здоровье любого игрока", "Позволяет раскрыть биологические характеристики любого игрока",
                     "Позволяет один раз избежать проигрыша", "Позволяет отразить голоса против вас в обратную сторону",
                     "Позволяет обменяться фобией с другим игроком", "Позволяет удвоить свой голос при голосовании",
                     "Позволяет отпереть одну комнату бункера", "Обменивает профессии двух других игроков на выбор",
                     "Позволяет закрыть одну комнату бункера", "Позволяет скопировать чужой багаж",
                     "Позволяет единожды защитьться от смены характеристик", "Позволяет не раскрывать свою характеристику один ход"))
        self.__card1 = choice(tuple(option))
        self.__card2 = choice(tuple(option - set(self.__card1)))
        
    def get_info(self):
        print(f"**Персонаж {self.__name}**")
        print(f"* Био характеристики: {self.__sex}/{self.__age} лет/{self.__gender}")
        print(f"* Профессия: {self.__profession}")
        print(f"* Здоровье: {self.__health}")
        print(f"* Хобби: {self.__hobby}")
        print(f"* Фобия: {self.__phobia}")
        print(f"* Характер: {self.__character}")
        print(f"* Доп. информация: {self.__dop_info}")
        print(f"* Знание: {self.__knowlege}")
        print(f"* Инвентарь: {self.__luggage}")
        print("*")
        print(f"* Карта №1: {self.__card1}")
        print("*")
        print(f"* Карта №2: {self.__card2}")



class Shelter:
    
    def __init__(self):
        self.players = dict()
        
        self.bunker = None
        
        self.apocalypse = None
        
    def __start_game(self):
        if len(self.players) < 3:
            print("Для игры нужно хотя бы три человека!")
            return
        self.apocalypse = Apocalypse()
        
        self.bunker = Bunker(len(self.players))
        
        for player in self.players:
            self.players[player] = Player(player)
        
        print("Игра создана!\n")
        self.apocalypse.get_info()
        print()
        self.bunker.get_info()
        
        print("Чтобы увидеть карточку игрока, введите 'show player_name'")
            
    def __clear_game(self):
        self.apocalypse = None
        
        self.bunker = None
        
        self.players.clear()
        
    def __add_player(self, name):
        if name in self.players:
            print("Игрок с таким именем уже есть!")
            return
        self.players[name] = None
        
    def __discard_player(self, name):
        if name in self.players:
            del self.players[name]
            return
        print("Такого игрока нет!")
        
    def __show_player(self, name):
        if name in self.players:
            if self.players[name] == None:
                print("Карточка игрока не создана! Начините новую игру, чтобы это исправить!")
            else:
                self.players[name].get_info()
                print()
                print("После просмотра напишите 'clear', чтобы другие не увидели вашу карточку!")
        else:
            print("Такого игрока нет!")
            
    def __show_game_setting(self):
        os.system('cls||clear')
        if self.apocalypse is None or self.bunker is None:
            print("Игра не сгенерирована полностью. начните игру с помощью команды 'start'")
            return
        self.apocalypse.get_info()
        print()
        self.bunker.get_info()
        
    def __clear(self):
        os.system('cls||clear')
        print("Чтобы увидеть список комманд, введите 'help'")
        
    def __list(self):
        if (len(self.players)) == 0:
            print("Пока нет ни одного игрока!")
        for name in self.players:
            print(name)
            
    def __apocalypse(self):
        apo = Apocalypse()
        apo.get_info()
        
    def __bunker(self, num):
        bunker = Bunker(num)
        bunker.get_info()
        
    def __player(self):
        person = Player("Игрок")
        person.get_info()
        
    def __close(self):
        if str(input("Вы уверены, что хотите выйти? [y/n]")) != 'y':
            return
        sys.exit()
        
    def __help(self):
        print("""              add player_name  – Добавить игрока в игру
              apocalypse       – Создать рандомный апокалипсис
              bunker num       – Создать рандомный бункер
              clear            – Очистить консоль
              close            – Закрыть программу
              collapse         – Уничтожить настройки игры и список игроков
              dis player_name  – Удалить игрока
              help             – Отобразить все команды
              list             – Список игроков
              player           – Создать рандомного игрока
              setting          – Отобразить апокалипсис и бункер, очистить консоль
              show player_name – Отобразить карточку игрока
              start            – Сгенерировать игру
              """)
        
    def __default(self):
        print("Команда не распознана!")
    
    def mainloop(self):
        print("Добро пожаловать в Бункер! Приятной игры!")
        print("Введите 'help', чтобы ознакомиться с командами!")
        while True:
            inp = str(input(">>>")).split()
            
            first = inp[0]
            
            words = len(inp)
            if words > 1:
                
                match first:
                    
                    case "add":
                        self.__add_player(" ".join(inp[1:]))
                        
                    case "bunker":
                        if words > 2:
                            self.__default()
                        else:
                            try:
                                num =  int(inp[1])
                                self.__bunker(num)
                            except ValueError:
                                self.__default()
                        
                    case "dis":
                        self.__discard_player(" ".join(inp[1:]))
                        
                    case "show":
                        self.__show_player(" ".join(inp[1:]))
                        
                    case _:
                        self.__default()
            else:
                
                match first:
                    
                    case "apocalypse":
                        self.__apocalypse()
                        
                    case "clear":
                        self.__clear()
                        
                    case "close":
                        self.__close()
                        
                    case "collapse":
                        self.__clear_game()
                        
                    case "help":
                        self.__help()
                        
                    case "list":
                        self.__list()
                    
                    case "player":
                        self.__player()
                        
                    case "setting":
                        self.__show_game_setting()
                        
                    case "start":
                        self.__start_game()
                        
                    case _:
                        self.__default()